import angular from 'angular';
import _ from 'lodash';
import {
  DataSourceInstanceSettings,
  DataQueryRequest,
  DataQueryResponse,
  ScopedVars,
  DataSourceApi,
} from '@grafana/data';



import { getBackendSrv } from '@grafana/runtime';
import { BMCDataSourceOptions } from 'types';
import { SmartGraphConstants } from './SmartGraphConstants';
import { SmartGraphDataSourceQuery } from './SmartGraphTypes';

import { Observable } from 'rxjs';

export class SmartGraphDatasource extends DataSourceApi<SmartGraphDataSourceQuery, BMCDataSourceOptions> {
  query(request: DataQueryRequest<SmartGraphDataSourceQuery>): Promise<DataQueryResponse> | Observable<DataQueryResponse> {
      throw new Error('Method not implemented.');
  }
  private static instance: SmartGraphDatasource;
  eventUrl!: string;
  dsName!: string;

  /*-- Below variables will be removed once end to end integration happens. --*/
  /*-- Below variables will be removed once end to end integration happens. --*/
  index!: string;
  timeField!: string;
  interval!: string;


  /*-- End --*/
  /** @ngInject */
  private constructor(
    instanceSettings: DataSourceInstanceSettings<BMCDataSourceOptions>,
    private templateSrv: any
  ) {
    super(instanceSettings);
    this.refreshSettings(instanceSettings);
  }

  refreshSettings(instSet: DataSourceInstanceSettings<BMCDataSourceOptions>) {
    this.eventUrl = instSet.url as string;
    this.dsName = instSet.name;

    /*-- Below assignments will be removed once end to end integration happens. --*/
    const settingsData = instSet.jsonData || ({} as BMCDataSourceOptions);
    this.timeField = settingsData.timeField || 'creation_time';

    this.interval = settingsData.timeInterval || '10s';
    
    /*-- End --*/
  }

  public static getInstance(
    instSet: DataSourceInstanceSettings<BMCDataSourceOptions>,
    templateSrv: any
  ): SmartGraphDatasource {
    if (!SmartGraphDatasource.instance) {
      SmartGraphDatasource.instance = new SmartGraphDatasource(instSet, templateSrv);
    }
    SmartGraphDatasource.instance.refreshSettings(instSet);
    return SmartGraphDatasource.instance;
  }

  private request(method: string, url: string, data?: undefined) {
    const options: any = {
      url:'https://smart-graph-api.qa.sps.secops.bmc.com'+ '/' + url,
      method: method,
      data: data,
      headers: { Authorization: '' },
    };
    let imsJWTToken: string = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhbXIiOlsiZXlKMFpXNWhiblJmYVdRaU9pQWlkR2xrWlhkaGVTSXNJQ0pwYm5OMFlXNWpaVjlwWkNJNklDSmtaVzF2SW4wPVxuIl19.1zhk2kxxsX-IaOcSeGxKcJGJ2n04uIb6nEMIeZGPt5E';

    if (imsJWTToken !== undefined) {
      options.headers['Authorization'] = 'Bearer ' + imsJWTToken;
    }

    if (method === 'GET') {
      options.headers = {
        'Content-Type': 'application/json',
        Accept: '*/*',
        Authorization: 'Bearer ' + imsJWTToken,
      };
    }
    return getBackendSrv().datasourceRequest(options);
  }

  /**
   * Sends a GET request to the specified url on the newest matching and available index.
   *
   * When multiple indices span the provided time range, the request is sent starting from the newest index,
   * and then going backwards until an index is found.
   *
   * @param url the url to query the index on, for example `/_mapping`.
   */
  private get(url: string) {
    /*  const range = this.timeSrv.timeRange();
    const indexList = this.indexPattern.getIndexList(range.from.valueOf(), range.to.valueOf());
    if (_.isArray(indexList) && indexList.length) {
      return this.requestAllIndices(indexList, url).then((results: any) => {
        results.data.$$config = results.config;
        return results.data;
      });
    } else {
      return this.request('GET', this.indexPattern.getIndexForToday() + url).then((results: any) => {
        results.data.$$config = results.config;
        return results.data;
      });
    }*/
    return this.request('GET', url).then((results: any) => {
      results.data.$$config = results.config;
      return results.data;
    });
  }

  /*private async requestAllIndices(indexList: string[], url: string): Promise<any> {
    const maxTraversals = 7; // do not go beyond one week (for a daily pattern)
    const listLen = indexList.length;
    for (let i = 0; i < Math.min(listLen, maxTraversals); i++) {
      try {
        return await this.request('GET', indexList[listLen - i - 1] + url);
      } catch (err) {
        if (err.status !== 404 || i === maxTraversals - 1) {
          throw err;
        }
      }
    }
  }*/

  
  interpolateVariablesInQueries(queries: SmartGraphDataSourceQuery[], scopedVars: ScopedVars): SmartGraphDataSourceQuery[] {
    let expandedQueries = queries;
    if (queries && queries.length > 0) {
      expandedQueries = queries.map(query => {
        const expandedQuery = {
          ...query,
          datasource: this.name,
          query: this.templateSrv.replace(query.sourceQuery.query, scopedVars, 'lucene'),
        };
        return expandedQuery;
      });
    }
    return expandedQueries;
  }

 

  async getServiceNames(query: any) {
    return this.get(SmartGraphConstants.SMARTGRAPH_SEARCH_SERVICE_URL).then((result: any) => {
      const names :any = [];
      var name = 'name';
      var nameArray = Object(result[0])["results"];
      Object.getOwnPropertyNames(nameArray).forEach(key => {
        let value = nameArray[name];
        names.push(value);

      });
      return names;
    });
  }

  


  metricFindQuery(query: any) {
    query = angular.fromJson(query);
    if (query) {
      return this.getServiceNames(query);
    }
       return Promise.resolve([]);
  }


  testDatasource(): Promise<any> {
    throw new Error('Method not implemented.');
  }
}
